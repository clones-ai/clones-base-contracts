{
    "compiler": {
        "version": "0.8.30+commit.73712a01"
    },
    "language": "Solidity",
    "output": {
        "abi": [
            {
                "inputs": [],
                "name": "AccessControlBadConfirmation",
                "type": "error"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "account",
                        "type": "address"
                    },
                    {
                        "internalType": "bytes32",
                        "name": "neededRole",
                        "type": "bytes32"
                    }
                ],
                "name": "AccessControlUnauthorizedAccount",
                "type": "error"
            },
            {
                "inputs": [],
                "name": "AccountingError",
                "type": "error"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "target",
                        "type": "address"
                    }
                ],
                "name": "AddressEmptyCode",
                "type": "error"
            },
            {
                "inputs": [],
                "name": "AdminCannotBeZeroAddress",
                "type": "error"
            },
            {
                "inputs": [],
                "name": "ArrayTooLong",
                "type": "error"
            },
            {
                "inputs": [],
                "name": "DirectEthNotAllowed",
                "type": "error"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "implementation",
                        "type": "address"
                    }
                ],
                "name": "ERC1967InvalidImplementation",
                "type": "error"
            },
            {
                "inputs": [],
                "name": "ERC1967NonPayable",
                "type": "error"
            },
            {
                "inputs": [],
                "name": "EnforcedPause",
                "type": "error"
            },
            {
                "inputs": [],
                "name": "ExpectedPause",
                "type": "error"
            },
            {
                "inputs": [],
                "name": "FactoryCannotBeZeroAddress",
                "type": "error"
            },
            {
                "inputs": [],
                "name": "FailedCall",
                "type": "error"
            },
            {
                "inputs": [],
                "name": "FarmerCannotBeZeroAddress",
                "type": "error"
            },
            {
                "inputs": [],
                "name": "FeeExceedsMaxFee",
                "type": "error"
            },
            {
                "inputs": [],
                "name": "FeedCannotBeZeroAddress",
                "type": "error"
            },
            {
                "inputs": [
                    {
                        "internalType": "uint256",
                        "name": "balance",
                        "type": "uint256"
                    },
                    {
                        "internalType": "uint256",
                        "name": "needed",
                        "type": "uint256"
                    }
                ],
                "name": "InsufficientBalance",
                "type": "error"
            },
            {
                "inputs": [],
                "name": "InsufficientFactoryFunds",
                "type": "error"
            },
            {
                "inputs": [],
                "name": "InvalidFee",
                "type": "error"
            },
            {
                "inputs": [],
                "name": "InvalidInitialization",
                "type": "error"
            },
            {
                "inputs": [],
                "name": "InvalidNewImplementation",
                "type": "error"
            },
            {
                "inputs": [],
                "name": "InvalidNonce",
                "type": "error"
            },
            {
                "inputs": [],
                "name": "InvalidTaskId",
                "type": "error"
            },
            {
                "inputs": [],
                "name": "NotInitializing",
                "type": "error"
            },
            {
                "inputs": [],
                "name": "NothingToWithdraw",
                "type": "error"
            },
            {
                "inputs": [],
                "name": "ReceiverCannotBeZeroAddress",
                "type": "error"
            },
            {
                "inputs": [],
                "name": "ReentrancyGuardReentrantCall",
                "type": "error"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "token",
                        "type": "address"
                    }
                ],
                "name": "SafeERC20FailedOperation",
                "type": "error"
            },
            {
                "inputs": [],
                "name": "SequencerDown",
                "type": "error"
            },
            {
                "inputs": [],
                "name": "SequencerFeedUnavailable",
                "type": "error"
            },
            {
                "inputs": [],
                "name": "TaskAlreadyCompleted",
                "type": "error"
            },
            {
                "inputs": [],
                "name": "TokenCannotBeZeroAddress",
                "type": "error"
            },
            {
                "inputs": [],
                "name": "TooManyBatches",
                "type": "error"
            },
            {
                "inputs": [],
                "name": "TooManyFactories",
                "type": "error"
            },
            {
                "inputs": [],
                "name": "TooManyTokensInSweep",
                "type": "error"
            },
            {
                "inputs": [],
                "name": "TreasuryCannotBeZeroAddress",
                "type": "error"
            },
            {
                "inputs": [],
                "name": "TreasuryNotSet",
                "type": "error"
            },
            {
                "inputs": [],
                "name": "UUPSUnauthorizedCallContext",
                "type": "error"
            },
            {
                "inputs": [
                    {
                        "internalType": "bytes32",
                        "name": "slot",
                        "type": "bytes32"
                    }
                ],
                "name": "UUPSUnsupportedProxiableUUID",
                "type": "error"
            },
            {
                "inputs": [],
                "name": "UnsupportedToken",
                "type": "error"
            },
            {
                "inputs": [],
                "name": "WithdrawalTooSoon",
                "type": "error"
            },
            {
                "inputs": [],
                "name": "ZeroAddress",
                "type": "error"
            },
            {
                "anonymous": false,
                "inputs": [
                    {
                        "indexed": true,
                        "internalType": "address",
                        "name": "factory",
                        "type": "address"
                    },
                    {
                        "indexed": true,
                        "internalType": "address",
                        "name": "token",
                        "type": "address"
                    },
                    {
                        "indexed": true,
                        "internalType": "uint256",
                        "name": "amount",
                        "type": "uint256"
                    },
                    {
                        "indexed": false,
                        "internalType": "uint256",
                        "name": "actualAmountReceived",
                        "type": "uint256"
                    }
                ],
                "name": "FactoryFunded",
                "type": "event"
            },
            {
                "anonymous": false,
                "inputs": [
                    {
                        "indexed": true,
                        "internalType": "address",
                        "name": "factory",
                        "type": "address"
                    },
                    {
                        "indexed": true,
                        "internalType": "address",
                        "name": "token",
                        "type": "address"
                    },
                    {
                        "indexed": true,
                        "internalType": "uint256",
                        "name": "amount",
                        "type": "uint256"
                    }
                ],
                "name": "FactoryRefunded",
                "type": "event"
            },
            {
                "anonymous": false,
                "inputs": [
                    {
                        "indexed": true,
                        "internalType": "address",
                        "name": "token",
                        "type": "address"
                    },
                    {
                        "indexed": true,
                        "internalType": "address",
                        "name": "treasury",
                        "type": "address"
                    },
                    {
                        "indexed": true,
                        "internalType": "uint256",
                        "name": "amount",
                        "type": "uint256"
                    }
                ],
                "name": "FeeSweepFailed",
                "type": "event"
            },
            {
                "anonymous": false,
                "inputs": [
                    {
                        "indexed": true,
                        "internalType": "address",
                        "name": "token",
                        "type": "address"
                    },
                    {
                        "indexed": true,
                        "internalType": "address",
                        "name": "treasury",
                        "type": "address"
                    },
                    {
                        "indexed": true,
                        "internalType": "uint256",
                        "name": "amount",
                        "type": "uint256"
                    }
                ],
                "name": "FeeSwept",
                "type": "event"
            },
            {
                "anonymous": false,
                "inputs": [
                    {
                        "indexed": true,
                        "internalType": "uint16",
                        "name": "oldFeeBps",
                        "type": "uint16"
                    },
                    {
                        "indexed": true,
                        "internalType": "uint16",
                        "name": "newFeeBps",
                        "type": "uint16"
                    }
                ],
                "name": "FeeUpdated",
                "type": "event"
            },
            {
                "anonymous": false,
                "inputs": [
                    {
                        "indexed": true,
                        "internalType": "uint256",
                        "name": "oldCooldown",
                        "type": "uint256"
                    },
                    {
                        "indexed": true,
                        "internalType": "uint256",
                        "name": "newCooldown",
                        "type": "uint256"
                    }
                ],
                "name": "GlobalWithdrawalCooldownUpdated",
                "type": "event"
            },
            {
                "anonymous": false,
                "inputs": [
                    {
                        "indexed": false,
                        "internalType": "uint64",
                        "name": "version",
                        "type": "uint64"
                    }
                ],
                "name": "Initialized",
                "type": "event"
            },
            {
                "anonymous": false,
                "inputs": [
                    {
                        "indexed": true,
                        "internalType": "uint8",
                        "name": "oldMax",
                        "type": "uint8"
                    },
                    {
                        "indexed": true,
                        "internalType": "uint8",
                        "name": "newMax",
                        "type": "uint8"
                    }
                ],
                "name": "MaxBatchesUpdated",
                "type": "event"
            },
            {
                "anonymous": false,
                "inputs": [
                    {
                        "indexed": true,
                        "internalType": "uint8",
                        "name": "oldMax",
                        "type": "uint8"
                    },
                    {
                        "indexed": true,
                        "internalType": "uint8",
                        "name": "newMax",
                        "type": "uint8"
                    }
                ],
                "name": "MaxFactoriesPerWithdrawalUpdated",
                "type": "event"
            },
            {
                "anonymous": false,
                "inputs": [
                    {
                        "indexed": true,
                        "internalType": "uint16",
                        "name": "oldMaxFeeBps",
                        "type": "uint16"
                    },
                    {
                        "indexed": true,
                        "internalType": "uint16",
                        "name": "newMaxFeeBps",
                        "type": "uint16"
                    }
                ],
                "name": "MaxFeeBpsUpdated",
                "type": "event"
            },
            {
                "anonymous": false,
                "inputs": [
                    {
                        "indexed": true,
                        "internalType": "uint8",
                        "name": "oldMax",
                        "type": "uint8"
                    },
                    {
                        "indexed": true,
                        "internalType": "uint8",
                        "name": "newMax",
                        "type": "uint8"
                    }
                ],
                "name": "MaxSweepTokensUpdated",
                "type": "event"
            },
            {
                "anonymous": false,
                "inputs": [
                    {
                        "indexed": false,
                        "internalType": "address",
                        "name": "account",
                        "type": "address"
                    }
                ],
                "name": "Paused",
                "type": "event"
            },
            {
                "anonymous": false,
                "inputs": [
                    {
                        "indexed": true,
                        "internalType": "address",
                        "name": "factory",
                        "type": "address"
                    },
                    {
                        "indexed": true,
                        "internalType": "address",
                        "name": "farmer",
                        "type": "address"
                    },
                    {
                        "indexed": true,
                        "internalType": "address",
                        "name": "token",
                        "type": "address"
                    },
                    {
                        "indexed": false,
                        "internalType": "uint256",
                        "name": "amount",
                        "type": "uint256"
                    },
                    {
                        "indexed": false,
                        "internalType": "uint256",
                        "name": "timestamp",
                        "type": "uint256"
                    }
                ],
                "name": "RewardRecorded",
                "type": "event"
            },
            {
                "anonymous": false,
                "inputs": [
                    {
                        "indexed": true,
                        "internalType": "address",
                        "name": "farmer",
                        "type": "address"
                    },
                    {
                        "indexed": true,
                        "internalType": "address",
                        "name": "token",
                        "type": "address"
                    },
                    {
                        "indexed": false,
                        "internalType": "uint256",
                        "name": "grossAmount",
                        "type": "uint256"
                    },
                    {
                        "indexed": false,
                        "internalType": "uint256",
                        "name": "feeAmount",
                        "type": "uint256"
                    },
                    {
                        "indexed": false,
                        "internalType": "uint256",
                        "name": "netAmount",
                        "type": "uint256"
                    },
                    {
                        "indexed": false,
                        "internalType": "uint256",
                        "name": "factoryCount",
                        "type": "uint256"
                    },
                    {
                        "indexed": true,
                        "internalType": "uint256",
                        "name": "timestamp",
                        "type": "uint256"
                    }
                ],
                "name": "RewardsWithdrawn",
                "type": "event"
            },
            {
                "anonymous": false,
                "inputs": [
                    {
                        "indexed": true,
                        "internalType": "bytes32",
                        "name": "role",
                        "type": "bytes32"
                    },
                    {
                        "indexed": true,
                        "internalType": "bytes32",
                        "name": "previousAdminRole",
                        "type": "bytes32"
                    },
                    {
                        "indexed": true,
                        "internalType": "bytes32",
                        "name": "newAdminRole",
                        "type": "bytes32"
                    }
                ],
                "name": "RoleAdminChanged",
                "type": "event"
            },
            {
                "anonymous": false,
                "inputs": [
                    {
                        "indexed": true,
                        "internalType": "bytes32",
                        "name": "role",
                        "type": "bytes32"
                    },
                    {
                        "indexed": true,
                        "internalType": "address",
                        "name": "account",
                        "type": "address"
                    },
                    {
                        "indexed": true,
                        "internalType": "address",
                        "name": "sender",
                        "type": "address"
                    }
                ],
                "name": "RoleGranted",
                "type": "event"
            },
            {
                "anonymous": false,
                "inputs": [
                    {
                        "indexed": true,
                        "internalType": "bytes32",
                        "name": "role",
                        "type": "bytes32"
                    },
                    {
                        "indexed": true,
                        "internalType": "address",
                        "name": "account",
                        "type": "address"
                    },
                    {
                        "indexed": true,
                        "internalType": "address",
                        "name": "sender",
                        "type": "address"
                    }
                ],
                "name": "RoleRevoked",
                "type": "event"
            },
            {
                "anonymous": false,
                "inputs": [
                    {
                        "indexed": true,
                        "internalType": "address",
                        "name": "oldFeed",
                        "type": "address"
                    },
                    {
                        "indexed": true,
                        "internalType": "address",
                        "name": "newFeed",
                        "type": "address"
                    }
                ],
                "name": "SequencerUptimeFeedUpdated",
                "type": "event"
            },
            {
                "anonymous": false,
                "inputs": [
                    {
                        "indexed": true,
                        "internalType": "bytes32",
                        "name": "taskId",
                        "type": "bytes32"
                    },
                    {
                        "indexed": true,
                        "internalType": "address",
                        "name": "farmer",
                        "type": "address"
                    },
                    {
                        "indexed": true,
                        "internalType": "address",
                        "name": "factory",
                        "type": "address"
                    },
                    {
                        "indexed": false,
                        "internalType": "address",
                        "name": "token",
                        "type": "address"
                    },
                    {
                        "indexed": false,
                        "internalType": "uint256",
                        "name": "amount",
                        "type": "uint256"
                    },
                    {
                        "indexed": false,
                        "internalType": "uint256",
                        "name": "timestamp",
                        "type": "uint256"
                    }
                ],
                "name": "TaskCompleted",
                "type": "event"
            },
            {
                "anonymous": false,
                "inputs": [
                    {
                        "indexed": true,
                        "internalType": "bytes32",
                        "name": "taskId",
                        "type": "bytes32"
                    },
                    {
                        "indexed": true,
                        "internalType": "address",
                        "name": "farmer",
                        "type": "address"
                    },
                    {
                        "indexed": true,
                        "internalType": "address",
                        "name": "factory",
                        "type": "address"
                    },
                    {
                        "indexed": false,
                        "internalType": "uint256",
                        "name": "blockNumber",
                        "type": "uint256"
                    }
                ],
                "name": "TaskValidated",
                "type": "event"
            },
            {
                "anonymous": false,
                "inputs": [
                    {
                        "indexed": true,
                        "internalType": "address",
                        "name": "token",
                        "type": "address"
                    },
                    {
                        "indexed": false,
                        "internalType": "string",
                        "name": "checkType",
                        "type": "string"
                    },
                    {
                        "indexed": false,
                        "internalType": "bytes",
                        "name": "reason",
                        "type": "bytes"
                    }
                ],
                "name": "TokenCheckFailed",
                "type": "event"
            },
            {
                "anonymous": false,
                "inputs": [
                    {
                        "indexed": true,
                        "internalType": "address",
                        "name": "token",
                        "type": "address"
                    },
                    {
                        "indexed": true,
                        "internalType": "uint256",
                        "name": "oldCooldown",
                        "type": "uint256"
                    },
                    {
                        "indexed": true,
                        "internalType": "uint256",
                        "name": "newCooldown",
                        "type": "uint256"
                    }
                ],
                "name": "TokenCooldownUpdated",
                "type": "event"
            },
            {
                "anonymous": false,
                "inputs": [
                    {
                        "indexed": true,
                        "internalType": "address",
                        "name": "token",
                        "type": "address"
                    },
                    {
                        "indexed": true,
                        "internalType": "address",
                        "name": "to",
                        "type": "address"
                    },
                    {
                        "indexed": true,
                        "internalType": "uint256",
                        "name": "amount",
                        "type": "uint256"
                    }
                ],
                "name": "TokensRecovered",
                "type": "event"
            },
            {
                "anonymous": false,
                "inputs": [
                    {
                        "indexed": true,
                        "internalType": "address",
                        "name": "oldTreasury",
                        "type": "address"
                    },
                    {
                        "indexed": true,
                        "internalType": "address",
                        "name": "newTreasury",
                        "type": "address"
                    }
                ],
                "name": "TreasuryUpdated",
                "type": "event"
            },
            {
                "anonymous": false,
                "inputs": [
                    {
                        "indexed": false,
                        "internalType": "address",
                        "name": "account",
                        "type": "address"
                    }
                ],
                "name": "Unpaused",
                "type": "event"
            },
            {
                "anonymous": false,
                "inputs": [
                    {
                        "indexed": true,
                        "internalType": "address",
                        "name": "implementation",
                        "type": "address"
                    }
                ],
                "name": "Upgraded",
                "type": "event"
            },
            {
                "anonymous": false,
                "inputs": [
                    {
                        "indexed": true,
                        "internalType": "address",
                        "name": "farmer",
                        "type": "address"
                    },
                    {
                        "indexed": true,
                        "internalType": "uint256",
                        "name": "oldNonce",
                        "type": "uint256"
                    },
                    {
                        "indexed": true,
                        "internalType": "uint256",
                        "name": "newNonce",
                        "type": "uint256"
                    }
                ],
                "name": "WithdrawalNonceIncremented",
                "type": "event"
            },
            {
                "inputs": [],
                "name": "ABSOLUTE_MAX_BATCHES",
                "outputs": [
                    {
                        "internalType": "uint8",
                        "name": "",
                        "type": "uint8"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "ABSOLUTE_MAX_FACTORIES_PER_WITHDRAWAL",
                "outputs": [
                    {
                        "internalType": "uint8",
                        "name": "",
                        "type": "uint8"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "ABSOLUTE_MAX_FEE_BPS",
                "outputs": [
                    {
                        "internalType": "uint16",
                        "name": "",
                        "type": "uint16"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "ABSOLUTE_MAX_SWEEP_TOKENS",
                "outputs": [
                    {
                        "internalType": "uint8",
                        "name": "",
                        "type": "uint8"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "DEFAULT_ADMIN_ROLE",
                "outputs": [
                    {
                        "internalType": "bytes32",
                        "name": "",
                        "type": "bytes32"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "FACTORY_ROLE",
                "outputs": [
                    {
                        "internalType": "bytes32",
                        "name": "",
                        "type": "bytes32"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "MAX_BPS",
                "outputs": [
                    {
                        "internalType": "uint16",
                        "name": "",
                        "type": "uint16"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "MAX_VIEW_ARRAY_LENGTH",
                "outputs": [
                    {
                        "internalType": "uint16",
                        "name": "",
                        "type": "uint16"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "NATIVE_TOKEN",
                "outputs": [
                    {
                        "internalType": "address",
                        "name": "",
                        "type": "address"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "PAUSER_ROLE",
                "outputs": [
                    {
                        "internalType": "bytes32",
                        "name": "",
                        "type": "bytes32"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "TREASURER_ROLE",
                "outputs": [
                    {
                        "internalType": "bytes32",
                        "name": "",
                        "type": "bytes32"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "UPGRADE_INTERFACE_VERSION",
                "outputs": [
                    {
                        "internalType": "string",
                        "name": "",
                        "type": "string"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "farmer",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "token",
                        "type": "address"
                    }
                ],
                "name": "canWithdraw",
                "outputs": [
                    {
                        "internalType": "bool",
                        "name": "canWithdrawNow",
                        "type": "bool"
                    },
                    {
                        "internalType": "uint256",
                        "name": "nextWithdrawalTime",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "farmer",
                        "type": "address"
                    },
                    {
                        "internalType": "address[]",
                        "name": "tokens",
                        "type": "address[]"
                    }
                ],
                "name": "canWithdrawMultiple",
                "outputs": [
                    {
                        "internalType": "bool[]",
                        "name": "eligibility",
                        "type": "bool[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "bytes32",
                        "name": "taskId",
                        "type": "bytes32"
                    }
                ],
                "name": "completedTasks",
                "outputs": [
                    {
                        "internalType": "bool",
                        "name": "completed",
                        "type": "bool"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "config",
                "outputs": [
                    {
                        "internalType": "address",
                        "name": "treasury",
                        "type": "address"
                    },
                    {
                        "internalType": "uint16",
                        "name": "feeBps",
                        "type": "uint16"
                    },
                    {
                        "internalType": "uint256",
                        "name": "withdrawalCooldown",
                        "type": "uint256"
                    },
                    {
                        "internalType": "uint16",
                        "name": "maxFeeBps",
                        "type": "uint16"
                    },
                    {
                        "internalType": "uint8",
                        "name": "maxSweepTokens",
                        "type": "uint8"
                    },
                    {
                        "internalType": "uint8",
                        "name": "maxBatches",
                        "type": "uint8"
                    },
                    {
                        "internalType": "uint8",
                        "name": "maxFactoriesPerWithdrawal",
                        "type": "uint8"
                    },
                    {
                        "internalType": "address",
                        "name": "sequencerUptimeFeed",
                        "type": "address"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "factory",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "token",
                        "type": "address"
                    }
                ],
                "name": "factoryFunding",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "amount",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "farmer",
                        "type": "address"
                    }
                ],
                "name": "farmerNonce",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "nonce",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "token",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256",
                        "name": "amount",
                        "type": "uint256"
                    }
                ],
                "name": "fundFactory",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "fundFactoryNative",
                "outputs": [],
                "stateMutability": "payable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "farmer",
                        "type": "address"
                    }
                ],
                "name": "getCurrentNonce",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "token",
                        "type": "address"
                    }
                ],
                "name": "getEffectiveCooldown",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "cooldown",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "farmer",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "token",
                        "type": "address"
                    }
                ],
                "name": "getOwedAggregate",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "farmer",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "factory",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "token",
                        "type": "address"
                    }
                ],
                "name": "getOwedByFactory",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "bytes32",
                        "name": "role",
                        "type": "bytes32"
                    }
                ],
                "name": "getRoleAdmin",
                "outputs": [
                    {
                        "internalType": "bytes32",
                        "name": "",
                        "type": "bytes32"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "bytes32",
                        "name": "role",
                        "type": "bytes32"
                    },
                    {
                        "internalType": "uint256",
                        "name": "index",
                        "type": "uint256"
                    }
                ],
                "name": "getRoleMember",
                "outputs": [
                    {
                        "internalType": "address",
                        "name": "",
                        "type": "address"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "bytes32",
                        "name": "role",
                        "type": "bytes32"
                    }
                ],
                "name": "getRoleMemberCount",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "bytes32",
                        "name": "role",
                        "type": "bytes32"
                    }
                ],
                "name": "getRoleMembers",
                "outputs": [
                    {
                        "internalType": "address[]",
                        "name": "",
                        "type": "address[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "farmer",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "token",
                        "type": "address"
                    }
                ],
                "name": "getWithdrawalStatus",
                "outputs": [
                    {
                        "internalType": "bool",
                        "name": "canWithdrawNow",
                        "type": "bool"
                    },
                    {
                        "internalType": "uint256",
                        "name": "remainingCooldown",
                        "type": "uint256"
                    },
                    {
                        "internalType": "uint256",
                        "name": "lastWithdrawTime",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "bytes32",
                        "name": "role",
                        "type": "bytes32"
                    },
                    {
                        "internalType": "address",
                        "name": "account",
                        "type": "address"
                    }
                ],
                "name": "grantRole",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "bytes32",
                        "name": "role",
                        "type": "bytes32"
                    },
                    {
                        "internalType": "address",
                        "name": "account",
                        "type": "address"
                    }
                ],
                "name": "hasRole",
                "outputs": [
                    {
                        "internalType": "bool",
                        "name": "",
                        "type": "bool"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "admin",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "treasury_",
                        "type": "address"
                    },
                    {
                        "internalType": "uint16",
                        "name": "feeBps_",
                        "type": "uint16"
                    },
                    {
                        "internalType": "address",
                        "name": "sequencerFeed_",
                        "type": "address"
                    }
                ],
                "name": "initialize",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "bytes32",
                        "name": "taskId",
                        "type": "bytes32"
                    }
                ],
                "name": "isTaskCompleted",
                "outputs": [
                    {
                        "internalType": "bool",
                        "name": "",
                        "type": "bool"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "token",
                        "type": "address"
                    }
                ],
                "name": "isTokenSupported",
                "outputs": [
                    {
                        "internalType": "bool",
                        "name": "",
                        "type": "bool"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "farmer",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "token",
                        "type": "address"
                    }
                ],
                "name": "lastWithdrawalTime",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "lastWithdrawal",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "pause",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "paused",
                "outputs": [
                    {
                        "internalType": "bool",
                        "name": "",
                        "type": "bool"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "token",
                        "type": "address"
                    }
                ],
                "name": "pendingFees",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "amount",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "proxiableUUID",
                "outputs": [
                    {
                        "internalType": "bytes32",
                        "name": "",
                        "type": "bytes32"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "farmer",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "token",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256",
                        "name": "amount",
                        "type": "uint256"
                    },
                    {
                        "internalType": "bytes32",
                        "name": "taskId",
                        "type": "bytes32"
                    }
                ],
                "name": "recordReward",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "token",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "to",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256",
                        "name": "amount",
                        "type": "uint256"
                    }
                ],
                "name": "recoverERC20",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "token",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256",
                        "name": "amount",
                        "type": "uint256"
                    }
                ],
                "name": "refundFactory",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "uint256",
                        "name": "amount",
                        "type": "uint256"
                    }
                ],
                "name": "refundFactoryNative",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "bytes32",
                        "name": "role",
                        "type": "bytes32"
                    },
                    {
                        "internalType": "address",
                        "name": "callerConfirmation",
                        "type": "address"
                    }
                ],
                "name": "renounceRole",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "bytes32",
                        "name": "role",
                        "type": "bytes32"
                    },
                    {
                        "internalType": "address",
                        "name": "account",
                        "type": "address"
                    }
                ],
                "name": "revokeRole",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "uint16",
                        "name": "newFeeBps",
                        "type": "uint16"
                    }
                ],
                "name": "setFeeBps",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "uint8",
                        "name": "newMaxBatches",
                        "type": "uint8"
                    }
                ],
                "name": "setMaxBatches",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "uint8",
                        "name": "newMaxFactories",
                        "type": "uint8"
                    }
                ],
                "name": "setMaxFactoriesPerWithdrawal",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "uint16",
                        "name": "newMaxFeeBps",
                        "type": "uint16"
                    }
                ],
                "name": "setMaxFeeBps",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "uint8",
                        "name": "newMaxSweepTokens",
                        "type": "uint8"
                    }
                ],
                "name": "setMaxSweepTokens",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "newFeed",
                        "type": "address"
                    }
                ],
                "name": "setSequencerUptimeFeed",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "token",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256",
                        "name": "cooldownSeconds",
                        "type": "uint256"
                    }
                ],
                "name": "setTokenCooldown",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "newTreasury",
                        "type": "address"
                    }
                ],
                "name": "setTreasury",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "uint256",
                        "name": "newCooldown",
                        "type": "uint256"
                    }
                ],
                "name": "setWithdrawalCooldown",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "bytes4",
                        "name": "interfaceId",
                        "type": "bytes4"
                    }
                ],
                "name": "supportsInterface",
                "outputs": [
                    {
                        "internalType": "bool",
                        "name": "",
                        "type": "bool"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address[]",
                        "name": "tokensToSweep",
                        "type": "address[]"
                    }
                ],
                "name": "sweepFees",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "token",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256",
                        "name": "testAmount",
                        "type": "uint256"
                    }
                ],
                "name": "testTokenCompatibility",
                "outputs": [
                    {
                        "internalType": "bool",
                        "name": "",
                        "type": "bool"
                    },
                    {
                        "internalType": "uint256",
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "token",
                        "type": "address"
                    }
                ],
                "name": "tokenSpecificCooldown",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "cooldown",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "farmer",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "token",
                        "type": "address"
                    }
                ],
                "name": "totalOwedByToken",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "amount",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "unpause",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "newImplementation",
                        "type": "address"
                    },
                    {
                        "internalType": "bytes",
                        "name": "data",
                        "type": "bytes"
                    }
                ],
                "name": "upgradeToAndCall",
                "outputs": [],
                "stateMutability": "payable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "token",
                                "type": "address"
                            },
                            {
                                "internalType": "address[]",
                                "name": "factories",
                                "type": "address[]"
                            }
                        ],
                        "internalType": "struct RewardPool.TokenFactoryBatch[]",
                        "name": "batches",
                        "type": "tuple[]"
                    },
                    {
                        "internalType": "uint256",
                        "name": "expectedNonce",
                        "type": "uint256"
                    }
                ],
                "name": "withdrawBatch",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "token",
                        "type": "address"
                    },
                    {
                        "internalType": "address[]",
                        "name": "factories",
                        "type": "address[]"
                    },
                    {
                        "internalType": "uint256",
                        "name": "expectedNonce",
                        "type": "uint256"
                    }
                ],
                "name": "withdrawRewards",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "stateMutability": "payable",
                "type": "receive"
            }
        ],
        "devdoc": {
            "custom:security-contact": "security@clones.ai",
            "details": "Designed for Base L2. Uses OZ v5.x upgradeable contracts.         Enhanced with Task ID system and Nonce-based withdrawals for maximum security.         IMPORTANT: This contract only supports standard ERC-20 tokens without transfer fees,         rebasing, or other non-standard behavior. Tokens with transfer taxes, rebasing,         or other mechanisms that alter the actual amount received are NOT supported and         may cause accounting inconsistencies.",
            "errors": {
                "AccessControlBadConfirmation()": [
                    {
                        "details": "The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."
                    }
                ],
                "AccessControlUnauthorizedAccount(address,bytes32)": [
                    {
                        "details": "The `account` is missing a role."
                    }
                ],
                "AddressEmptyCode(address)": [
                    {
                        "details": "There's no code at `target` (it is not a contract)."
                    }
                ],
                "ERC1967InvalidImplementation(address)": [
                    {
                        "details": "The `implementation` of the proxy is invalid."
                    }
                ],
                "ERC1967NonPayable()": [
                    {
                        "details": "An upgrade function sees `msg.value > 0` that may be lost."
                    }
                ],
                "EnforcedPause()": [
                    {
                        "details": "The operation failed because the contract is paused."
                    }
                ],
                "ExpectedPause()": [
                    {
                        "details": "The operation failed because the contract is not paused."
                    }
                ],
                "FailedCall()": [
                    {
                        "details": "A call to an address target failed. The target may have reverted."
                    }
                ],
                "InsufficientBalance(uint256,uint256)": [
                    {
                        "details": "The ETH balance of the account is not enough to perform the operation."
                    }
                ],
                "InvalidInitialization()": [
                    {
                        "details": "The contract is already initialized."
                    }
                ],
                "NotInitializing()": [
                    {
                        "details": "The contract is not initializing."
                    }
                ],
                "ReentrancyGuardReentrantCall()": [
                    {
                        "details": "Unauthorized reentrant call."
                    }
                ],
                "SafeERC20FailedOperation(address)": [
                    {
                        "details": "An operation with an ERC-20 token failed."
                    }
                ],
                "UUPSUnauthorizedCallContext()": [
                    {
                        "details": "The call is from an unauthorized context."
                    }
                ],
                "UUPSUnsupportedProxiableUUID(bytes32)": [
                    {
                        "details": "The storage `slot` is unsupported as a UUID."
                    }
                ]
            },
            "events": {
                "FactoryFunded(address,address,uint256,uint256)": {
                    "params": {
                        "actualAmountReceived": "The actual amount of tokens received after any potential transfer fees.",
                        "amount": "The expected amount of tokens to be funded.",
                        "factory": "The address of the factory providing the funds.",
                        "token": "The address of the token being funded."
                    }
                },
                "FactoryRefunded(address,address,uint256)": {
                    "params": {
                        "amount": "The amount of tokens refunded.",
                        "factory": "The address of the factory refunding the funds.",
                        "token": "The address of the token being refunded."
                    }
                },
                "FeeSweepFailed(address,address,uint256)": {
                    "params": {
                        "amount": "The amount of fees that failed to be swept.",
                        "token": "The address of the token for which the fee sweep failed.",
                        "treasury": "The address of the treasury that was intended to receive the fees."
                    }
                },
                "FeeSwept(address,address,uint256)": {
                    "params": {
                        "amount": "The amount of fees swept.",
                        "token": "The address of the token for which fees were swept.",
                        "treasury": "The address of the treasury receiving the fees."
                    }
                },
                "FeeUpdated(uint16,uint16)": {
                    "params": {
                        "newFeeBps": "The new fee in basis points.",
                        "oldFeeBps": "The previous fee in basis points."
                    }
                },
                "GlobalWithdrawalCooldownUpdated(uint256,uint256)": {
                    "params": {
                        "newCooldown": "The new cooldown in seconds.",
                        "oldCooldown": "The previous cooldown in seconds."
                    }
                },
                "Initialized(uint64)": {
                    "details": "Triggered when the contract has been initialized or reinitialized."
                },
                "MaxBatchesUpdated(uint8,uint8)": {
                    "params": {
                        "newMax": "The new maximum number.",
                        "oldMax": "The previous maximum number."
                    }
                },
                "MaxFactoriesPerWithdrawalUpdated(uint8,uint8)": {
                    "params": {
                        "newMax": "The new maximum number.",
                        "oldMax": "The previous maximum number."
                    }
                },
                "MaxFeeBpsUpdated(uint16,uint16)": {
                    "params": {
                        "newMaxFeeBps": "The new maximum fee in basis points.",
                        "oldMaxFeeBps": "The previous maximum fee in basis points."
                    }
                },
                "MaxSweepTokensUpdated(uint8,uint8)": {
                    "params": {
                        "newMax": "The new maximum number.",
                        "oldMax": "The previous maximum number."
                    }
                },
                "Paused(address)": {
                    "details": "Emitted when the pause is triggered by `account`."
                },
                "RewardRecorded(address,address,address,uint256,uint256)": {
                    "params": {
                        "amount": "The amount of the reward.",
                        "factory": "The address of the factory that recorded the reward.",
                        "farmer": "The address of the farmer who earned the reward.",
                        "timestamp": "The timestamp when the reward was recorded.",
                        "token": "The address of the reward token."
                    }
                },
                "RewardsWithdrawn(address,address,uint256,uint256,uint256,uint256,uint256)": {
                    "params": {
                        "factoryCount": "The number of factories from which rewards were withdrawn.",
                        "farmer": "The address of the farmer withdrawing rewards.",
                        "feeAmount": "The portion of the withdrawal taken as a platform fee.",
                        "grossAmount": "The total amount of rewards withdrawn before fees.",
                        "netAmount": "The net amount of rewards received by the farmer.",
                        "timestamp": "The timestamp of the withdrawal.",
                        "token": "The address of the token being withdrawn (address(0) for native ETH)."
                    }
                },
                "RoleAdminChanged(bytes32,bytes32,bytes32)": {
                    "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted to signal this."
                },
                "RoleGranted(bytes32,address,address)": {
                    "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call. This account bears the admin role (for the granted role). Expected in cases where the role was granted using the internal {AccessControl-_grantRole}."
                },
                "RoleRevoked(bytes32,address,address)": {
                    "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
                },
                "SequencerUptimeFeedUpdated(address,address)": {
                    "params": {
                        "newFeed": "The new feed address.",
                        "oldFeed": "The previous feed address."
                    }
                },
                "TaskCompleted(bytes32,address,address,address,uint256,uint256)": {
                    "params": {
                        "amount": "The reward amount.",
                        "factory": "The address of the factory that assigned the task.",
                        "farmer": "The address of the farmer who completed the task.",
                        "taskId": "The unique identifier for the completed task.",
                        "timestamp": "The timestamp of task completion.",
                        "token": "The address of the reward token."
                    }
                },
                "TaskValidated(bytes32,address,address,uint256)": {
                    "params": {
                        "blockNumber": "The block number at which the validation occurred.",
                        "factory": "The address of the factory that validated the task.",
                        "farmer": "The address of the farmer associated with the task.",
                        "taskId": "The unique identifier for the validated task."
                    }
                },
                "TokenCheckFailed(address,string,bytes)": {
                    "params": {
                        "checkType": "The type of check being performed (e.g., \"isSupported\", \"testCompatibility\").",
                        "reason": "The reason for the failure (e.g., revert data).",
                        "token": "The address of the token being checked."
                    }
                },
                "TokenCooldownUpdated(address,uint256,uint256)": {
                    "params": {
                        "newCooldown": "The new cooldown period in seconds.",
                        "oldCooldown": "The previous cooldown period in seconds.",
                        "token": "The address of the token for which the cooldown was updated."
                    }
                },
                "TokensRecovered(address,address,uint256)": {
                    "params": {
                        "amount": "The amount of tokens recovered.",
                        "to": "The address to which the tokens were sent.",
                        "token": "The address of the recovered ERC-20 token."
                    }
                },
                "TreasuryUpdated(address,address)": {
                    "params": {
                        "newTreasury": "The new treasury address.",
                        "oldTreasury": "The previous treasury address."
                    }
                },
                "Unpaused(address)": {
                    "details": "Emitted when the pause is lifted by `account`."
                },
                "Upgraded(address)": {
                    "details": "Emitted when the implementation is upgraded."
                },
                "WithdrawalNonceIncremented(address,uint256,uint256)": {
                    "params": {
                        "farmer": "The address of the farmer whose nonce was incremented.",
                        "newNonce": "The nonce after the increment.",
                        "oldNonce": "The nonce before the increment."
                    }
                }
            },
            "kind": "dev",
            "methods": {
                "canWithdraw(address,address)": {
                    "params": {
                        "farmer": "Farmer address",
                        "token": "Token address"
                    },
                    "returns": {
                        "canWithdrawNow": "True if withdrawal is allowed immediately",
                        "nextWithdrawalTime": "Timestamp when next withdrawal will be allowed"
                    }
                },
                "canWithdrawMultiple(address,address[])": {
                    "params": {
                        "farmer": "Farmer address",
                        "tokens": "Array of token addresses to check"
                    },
                    "returns": {
                        "eligibility": "Array of booleans indicating eligibility for each token"
                    }
                },
                "fundFactory(address,uint256)": {
                    "details": "IMPORTANT: Only supports standard ERC-20 tokens without transfer fees or rebasing.         Measures actual balance received to handle edge cases with non-standard tokens.         Reverts if the token exhibits non-standard behavior (e.g., transfer fees > 0.1%).",
                    "params": {
                        "amount": "Expected amount to transfer",
                        "token": "Token address (must be standard ERC-20 without fees/rebasing)"
                    }
                },
                "getCurrentNonce(address)": {
                    "params": {
                        "farmer": "Farmer address"
                    },
                    "returns": {
                        "_0": "uint256 Current nonce"
                    }
                },
                "getEffectiveCooldown(address)": {
                    "params": {
                        "token": "Token address"
                    },
                    "returns": {
                        "cooldown": "Effective cooldown period in seconds"
                    }
                },
                "getOwedAggregate(address,address)": {
                    "params": {
                        "farmer": "The address of the farmer.",
                        "token": "The address of the token."
                    },
                    "returns": {
                        "_0": "The total amount owed."
                    }
                },
                "getOwedByFactory(address,address,address)": {
                    "params": {
                        "factory": "The address of the factory.",
                        "farmer": "The address of the farmer.",
                        "token": "The address of the token."
                    },
                    "returns": {
                        "_0": "The amount owed."
                    }
                },
                "getRoleAdmin(bytes32)": {
                    "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
                },
                "getRoleMember(bytes32,uint256)": {
                    "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
                },
                "getRoleMemberCount(bytes32)": {
                    "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
                },
                "getRoleMembers(bytes32)": {
                    "details": "Return all accounts that have `role` WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that this function has an unbounded cost, and using it as part of a state-changing function may render the function uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block."
                },
                "getWithdrawalStatus(address,address)": {
                    "params": {
                        "farmer": "Farmer address",
                        "token": "Token address"
                    },
                    "returns": {
                        "canWithdrawNow": "True if can withdraw now",
                        "lastWithdrawTime": "Timestamp of last withdrawal",
                        "remainingCooldown": "Seconds remaining in cooldown (0 if can withdraw)"
                    }
                },
                "grantRole(bytes32,address)": {
                    "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
                },
                "hasRole(bytes32,address)": {
                    "details": "Returns `true` if `account` has been granted `role`."
                },
                "initialize(address,address,uint16,address)": {
                    "params": {
                        "admin": "The address to receive DEFAULT_ADMIN/PAUSER/TREASURER by default (use a multisig Safe in prod)",
                        "feeBps_": "Initial fee in basis points (e.g., 1000 = 10%)",
                        "sequencerFeed_": "Address of the L2 sequencer uptime feed (Chainlink). Use address(0) for local testing.",
                        "treasury_": "Initial treasury address"
                    }
                },
                "isTaskCompleted(bytes32)": {
                    "params": {
                        "taskId": "Task identifier"
                    },
                    "returns": {
                        "_0": "bool True if task is completed"
                    }
                },
                "isTokenSupported(address)": {
                    "details": "Heuristic: presence of code + `view` calls that don't revert.",
                    "params": {
                        "token": "The address of the token to check."
                    },
                    "returns": {
                        "_0": "A boolean indicating if the token is supported."
                    }
                },
                "paused()": {
                    "details": "Returns true if the contract is paused, and false otherwise."
                },
                "proxiableUUID()": {
                    "details": "Implementation of the ERC-1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
                },
                "recordReward(address,address,uint256,bytes32)": {
                    "details": "ONLY secure method to record rewards - prevents duplicate task completion",
                    "params": {
                        "amount": "Reward amount",
                        "farmer": "Address receiving the reward",
                        "taskId": "Unique identifier for the completed task",
                        "token": "Token address (or address(0) for ETH)"
                    }
                },
                "recoverERC20(address,address,uint256)": {
                    "details": "This is a critical administrative function. It should only be used for recovery purposes,      as misuse could disrupt the contract's accounting of funds intended for rewards.      It allows transferring any amount of a given ERC-20 token from this contract's balance.",
                    "params": {
                        "amount": "The amount of tokens to recover.",
                        "to": "The address to which the recovered tokens will be sent.",
                        "token": "The address of the ERC-20 token to recover. Must not be the native token address."
                    }
                },
                "refundFactory(address,uint256)": {
                    "params": {
                        "amount": "The amount of tokens to refund.",
                        "token": "The address of the ERC20 token to refund."
                    }
                },
                "refundFactoryNative(uint256)": {
                    "params": {
                        "amount": "The amount of native ETH to refund."
                    }
                },
                "renounceRole(bytes32,address)": {
                    "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."
                },
                "revokeRole(bytes32,address)": {
                    "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
                },
                "setFeeBps(uint16)": {
                    "params": {
                        "newFeeBps": "The new fee in basis points (e.g., 100 = 1%)."
                    }
                },
                "setMaxBatches(uint8)": {
                    "params": {
                        "newMaxBatches": "The new maximum number of batches."
                    }
                },
                "setMaxFactoriesPerWithdrawal(uint8)": {
                    "params": {
                        "newMaxFactories": "The new maximum number of factories."
                    }
                },
                "setMaxFeeBps(uint16)": {
                    "params": {
                        "newMaxFeeBps": "The new maximum fee in basis points."
                    }
                },
                "setMaxSweepTokens(uint8)": {
                    "params": {
                        "newMaxSweepTokens": "The new maximum number of tokens."
                    }
                },
                "setSequencerUptimeFeed(address)": {
                    "params": {
                        "newFeed": "The address of the new feed contract."
                    }
                },
                "setTokenCooldown(address,uint256)": {
                    "params": {
                        "cooldownSeconds": "Cooldown period in seconds",
                        "token": "Token address (address(0) for native ETH)"
                    }
                },
                "setTreasury(address)": {
                    "params": {
                        "newTreasury": "The address of the new treasury."
                    }
                },
                "setWithdrawalCooldown(uint256)": {
                    "params": {
                        "newCooldown": "New cooldown period in seconds"
                    }
                },
                "supportsInterface(bytes4)": {
                    "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
                },
                "sweepFees(address[])": {
                    "details": "This approach prevents farmer withdrawals from failing if the treasury contract      cannot receive ETH or reverts for any reason. The treasurer can call this function      to collect fees at their convenience.",
                    "params": {
                        "tokensToSweep": "An array of token addresses for which to sweep the fees. Must not exceed config.maxSweepTokens."
                    }
                },
                "testTokenCompatibility(address,uint256)": {
                    "details": "WARNING: This function transfers a small amount of tokens to test compatibility.         Only call with tokens you trust and have approved for this contract.",
                    "params": {
                        "testAmount": "Small amount to test (recommend 1 wei or 1 token unit)",
                        "token": "Token address to test"
                    },
                    "returns": {
                        "_0": "bool True if token behaves as expected",
                        "_1": "uint256 Actual amount received"
                    }
                },
                "upgradeToAndCall(address,bytes)": {
                    "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
                    "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
                },
                "withdrawBatch((address,address[])[],uint256)": {
                    "details": "Unified secure method for batch operations - includes all security features",
                    "params": {
                        "batches": "Array of withdrawal batches",
                        "expectedNonce": "Expected global nonce for this batch operation"
                    }
                },
                "withdrawRewards(address,address[],uint256)": {
                    "details": "Unified secure method to withdraw - includes all security features",
                    "params": {
                        "expectedNonce": "Expected nonce (must match farmerNonce[msg.sender])",
                        "factories": "List of factories to withdraw from",
                        "token": "Token to withdraw"
                    }
                }
            },
            "title": "RewardPool (UUPS Upgradeable)",
            "version": 1
        },
        "userdoc": {
            "events": {
                "FactoryFunded(address,address,uint256,uint256)": {
                    "notice": "Emitted when a factory successfully funds the reward pool."
                },
                "FactoryRefunded(address,address,uint256)": {
                    "notice": "Emitted when a factory refunds its unused funds from the pool."
                },
                "FeeSweepFailed(address,address,uint256)": {
                    "notice": "Emitted when a fee sweep for a specific token fails."
                },
                "FeeSwept(address,address,uint256)": {
                    "notice": "Emitted when fees for a specific token are successfully swept to the treasury."
                },
                "FeeUpdated(uint16,uint16)": {
                    "notice": "Emitted when the platform fee is updated."
                },
                "GlobalWithdrawalCooldownUpdated(uint256,uint256)": {
                    "notice": "Emitted when the global withdrawal cooldown is updated."
                },
                "MaxBatchesUpdated(uint8,uint8)": {
                    "notice": "Emitted when the maximum number of batches in a single withdrawal is updated."
                },
                "MaxFactoriesPerWithdrawalUpdated(uint8,uint8)": {
                    "notice": "Emitted when the maximum number of factories per withdrawal is updated."
                },
                "MaxFeeBpsUpdated(uint16,uint16)": {
                    "notice": "Emitted when the maximum platform fee is updated."
                },
                "MaxSweepTokensUpdated(uint8,uint8)": {
                    "notice": "Emitted when the maximum number of tokens in a single sweep is updated."
                },
                "RewardRecorded(address,address,address,uint256,uint256)": {
                    "notice": "Emitted when a reward is recorded for a farmer by a factory."
                },
                "RewardsWithdrawn(address,address,uint256,uint256,uint256,uint256,uint256)": {
                    "notice": "Emitted when a farmer withdraws rewards."
                },
                "SequencerUptimeFeedUpdated(address,address)": {
                    "notice": "Emitted when the L2 sequencer uptime feed address is updated."
                },
                "TaskCompleted(bytes32,address,address,address,uint256,uint256)": {
                    "notice": "Emitted when a task is successfully completed and its reward recorded."
                },
                "TaskValidated(bytes32,address,address,uint256)": {
                    "notice": "Emitted when a task's completion is validated on-chain."
                },
                "TokenCheckFailed(address,string,bytes)": {
                    "notice": "Emitted when a token check (support or compatibility) fails."
                },
                "TokenCooldownUpdated(address,uint256,uint256)": {
                    "notice": "Emitted when the withdrawal cooldown period for a token is updated."
                },
                "TokensRecovered(address,address,uint256)": {
                    "notice": "Emitted when ERC-20 tokens are recovered from the contract by an admin."
                },
                "TreasuryUpdated(address,address)": {
                    "notice": "Emitted when the treasury address is updated."
                },
                "WithdrawalNonceIncremented(address,uint256,uint256)": {
                    "notice": "Emitted when a farmer's withdrawal nonce is incremented."
                }
            },
            "kind": "user",
            "methods": {
                "ABSOLUTE_MAX_BATCHES()": {
                    "notice": "Absolute maximum number of batches in a single withdrawal."
                },
                "ABSOLUTE_MAX_FACTORIES_PER_WITHDRAWAL()": {
                    "notice": "Absolute maximum number of factories in a single withdrawal."
                },
                "ABSOLUTE_MAX_FEE_BPS()": {
                    "notice": "Absolute maximum fee that can be set, to prevent misconfiguration (50%)."
                },
                "ABSOLUTE_MAX_SWEEP_TOKENS()": {
                    "notice": "Absolute maximum number of tokens that can be swept in a single transaction."
                },
                "FACTORY_ROLE()": {
                    "notice": "Role for factories to fund the pool and record rewards."
                },
                "MAX_BPS()": {
                    "notice": "Maximum basis points, used for percentage calculations (100%)."
                },
                "MAX_VIEW_ARRAY_LENGTH()": {
                    "notice": "Maximum array length for view functions."
                },
                "NATIVE_TOKEN()": {
                    "notice": "Sentinel value representing native ETH in the contract."
                },
                "PAUSER_ROLE()": {
                    "notice": "Role for pausing/unpausing the contract in emergencies."
                },
                "TREASURER_ROLE()": {
                    "notice": "Role for managing treasury, fees, and sweeping funds."
                },
                "canWithdraw(address,address)": {
                    "notice": "Check if farmer can withdraw specific token (cooldown check)"
                },
                "canWithdrawMultiple(address,address[])": {
                    "notice": "Check withdrawal eligibility for multiple tokens at once"
                },
                "completedTasks(bytes32)": {
                    "notice": "Tracks completed tasks to prevent duplicate rewards"
                },
                "config()": {
                    "notice": "Stores the current configuration of the reward pool."
                },
                "factoryFunding(address,address)": {
                    "notice": "Tokens deposited by each factory into the pool that are not yet allocated to farmers"
                },
                "farmerNonce(address)": {
                    "notice": "Global nonce for each farmer (incremented on each withdrawal)"
                },
                "fundFactory(address,uint256)": {
                    "notice": "Factory deposits ERC20 reward tokens into the pool. Requires prior ERC20 approval."
                },
                "fundFactoryNative()": {
                    "notice": "Factory deposits native ETH into the pool."
                },
                "getCurrentNonce(address)": {
                    "notice": "Get current nonce for a farmer"
                },
                "getEffectiveCooldown(address)": {
                    "notice": "Get effective cooldown for a token (token-specific or global default)"
                },
                "getOwedAggregate(address,address)": {
                    "notice": "Gets the total aggregated amount owed to a farmer for a specific token across all factories."
                },
                "getOwedByFactory(address,address,address)": {
                    "notice": "Gets the amount owed to a farmer by a specific factory for a given token."
                },
                "getWithdrawalStatus(address,address)": {
                    "notice": "Get detailed withdrawal status for a farmer and token"
                },
                "initialize(address,address,uint16,address)": {
                    "notice": "Initializes the contract."
                },
                "isTaskCompleted(bytes32)": {
                    "notice": "Check if a task has been completed"
                },
                "isTokenSupported(address)": {
                    "notice": "Check if a token looks like a standard ERC-20 (purement `view`)"
                },
                "lastWithdrawalTime(address,address)": {
                    "notice": "Timestamp of last withdrawal per farmer/token (for rate limiting)"
                },
                "pause()": {
                    "notice": "Pauses the contract, preventing key actions like funding and withdrawals."
                },
                "pendingFees(address)": {
                    "notice": "Fees accumulated per token to be swept by the treasury."
                },
                "recordReward(address,address,uint256,bytes32)": {
                    "notice": "Record reward with unique task ID to prevent duplicate rewards for the same task"
                },
                "recoverERC20(address,address,uint256)": {
                    "notice": "Recovers ERC-20 tokens that have been mistakenly sent to this contract."
                },
                "refundFactory(address,uint256)": {
                    "notice": "Factory can refund unused ERC20 funding (i.e., tokens not yet allocated to farmers)."
                },
                "refundFactoryNative(uint256)": {
                    "notice": "Factory can refund unused native ETH funding."
                },
                "setFeeBps(uint16)": {
                    "notice": "Sets the platform fee in basis points."
                },
                "setMaxBatches(uint8)": {
                    "notice": "Sets the maximum number of batches in a single `withdrawBatch` call."
                },
                "setMaxFactoriesPerWithdrawal(uint8)": {
                    "notice": "Sets the maximum number of factories per withdrawal."
                },
                "setMaxFeeBps(uint16)": {
                    "notice": "Sets the maximum platform fee that can be configured."
                },
                "setMaxSweepTokens(uint8)": {
                    "notice": "Sets the maximum number of tokens that can be swept in a single `sweepFees` call."
                },
                "setSequencerUptimeFeed(address)": {
                    "notice": "Sets the L2 sequencer uptime feed address. Must not be the zero address."
                },
                "setTokenCooldown(address,uint256)": {
                    "notice": "Set cooldown period for a specific token"
                },
                "setTreasury(address)": {
                    "notice": "Sets the treasury address where fees are collected."
                },
                "setWithdrawalCooldown(uint256)": {
                    "notice": "Set global withdrawal cooldown period"
                },
                "sweepFees(address[])": {
                    "notice": "Allows the treasury to sweep accumulated fees for multiple tokens."
                },
                "testTokenCompatibility(address,uint256)": {
                    "notice": "Test token compatibility with a small amount"
                },
                "tokenSpecificCooldown(address)": {
                    "notice": "Set different cooldown periods for different tokens"
                },
                "totalOwedByToken(address,address)": {
                    "notice": "Aggregated owed per farmer per token (gas-friendly for reads & accounting updates)"
                },
                "unpause()": {
                    "notice": "Unpauses the contract, resuming normal operations."
                },
                "withdrawBatch((address,address[])[],uint256)": {
                    "notice": "Secure batch withdraw with global nonce protection and rate limiting"
                },
                "withdrawRewards(address,address[],uint256)": {
                    "notice": "Secure withdrawal with nonce verification and rate limiting"
                }
            },
            "notice": "Centralized reward pool for multiple factories. Farmers withdraw their rewards and pay gas.         A platform fee is skimmed on each withdrawal and sent to the treasury. Supports multiple ERC20 tokens         and native ETH on Base.",
            "version": 1
        }
    },
    "settings": {
        "compilationTarget": {
            "contracts/RewardPool.sol": "RewardPool"
        },
        "evmVersion": "paris",
        "libraries": {},
        "metadata": {
            "bytecodeHash": "ipfs"
        },
        "optimizer": {
            "enabled": true,
            "runs": 600
        },
        "remappings": []
    },
    "sources": {
        "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol": {
            "keccak256": "0x85a70e2b1b65e9ba456add364d22b97eb9944083df1c39c0b4bd6a4b5aa386a4",
            "license": "MIT",
            "urls": [
                "bzz-raw://d32a33be6ca4d8e89b9e82e3f9cec7a6c4e040534152313ff55da85b8f193059",
                "dweb:/ipfs/QmeR55L8t2A8xZ1nvT5y4yVWfFbbmpaGAtGBMz3GGNpuyP"
            ]
        },
        "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlEnumerableUpgradeable.sol": {
            "keccak256": "0x52d72be5f7529846ba76aacf0c49de92bde89a5203b6fbc3919e7384c0df0905",
            "license": "MIT",
            "urls": [
                "bzz-raw://0d5e789d39c6623db24d427ca8380978f44cc736070e2ac3ee19f88095c43b17",
                "dweb:/ipfs/QmSzyMMTnZrUWY2e4B2U3VE2fjz8AFawhk7jex8SPW1eT2"
            ]
        },
        "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
            "keccak256": "0xdb4d24ee2c087c391d587cd17adfe5b3f9d93b3110b1388c2ab6c7c0ad1dcd05",
            "license": "MIT",
            "urls": [
                "bzz-raw://ab7b6d5b9e2b88176312967fe0f0e78f3d9a1422fa5e4b64e2440c35869b5d08",
                "dweb:/ipfs/QmXKYWWyzcLg1B2k7Sb1qkEXgLCYfXecR9wYW5obRzWP1Q"
            ]
        },
        "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol": {
            "keccak256": "0x574a7451e42724f7de29e2855c392a8a5020acd695169466a18459467d719d63",
            "license": "MIT",
            "urls": [
                "bzz-raw://5bc189f63b639ee173dd7b6fecc39baf7113bf161776aea22b34c57fdd1872ec",
                "dweb:/ipfs/QmZAf2VtjDLRULqjJkde6LNsxAg12tUqpPqgUQQZbAjgtZ"
            ]
        },
        "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
            "keccak256": "0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397",
            "license": "MIT",
            "urls": [
                "bzz-raw://08e39f23d5b4692f9a40803e53a8156b72b4c1f9902a88cd65ba964db103dab9",
                "dweb:/ipfs/QmPKn6EYDgpga7KtpkA8wV2yJCYGMtc9K4LkJfhKX2RVSV"
            ]
        },
        "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol": {
            "keccak256": "0xa6bf6b7efe0e6625a9dcd30c5ddf52c4c24fe8372f37c7de9dbf5034746768d5",
            "license": "MIT",
            "urls": [
                "bzz-raw://8c353ee3705bbf6fadb84c0fb10ef1b736e8ca3ca1867814349d1487ed207beb",
                "dweb:/ipfs/QmcugaPssrzGGE8q4YZKm2ZhnD3kCijjcgdWWg76nWt3FY"
            ]
        },
        "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol": {
            "keccak256": "0x361126a17677994081cd9cb69c3f50cffff6e920d25cb7e428acdb1ae41d1866",
            "license": "MIT",
            "urls": [
                "bzz-raw://19ae787a7dd001269cd60a394b1a5261b78925a0fc3a6f927beb2986a9aa56cf",
                "dweb:/ipfs/QmYLfXiuKmcRgTDBEDXMMjXU8t6JxsspUmjxYzqWS55oEv"
            ]
        },
        "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol": {
            "keccak256": "0x6694b63ddb2c59bbe341c846171798350e8f72fa02189fcdeaca864e28b54e1f",
            "license": "MIT",
            "urls": [
                "bzz-raw://7d945d33e2189ac4e531e4ed228f59ca957b3898c4f9051f4b8c7ae44d72b23a",
                "dweb:/ipfs/QmRcEwubTe3xyXxthijs5fVzEgUFSxeddjd5PGfhBnkunX"
            ]
        },
        "@openzeppelin/contracts/access/IAccessControl.sol": {
            "keccak256": "0xbff9f59c84e5337689161ce7641c0ef8e872d6a7536fbc1f5133f128887aba3c",
            "license": "MIT",
            "urls": [
                "bzz-raw://b308f882e796f7b79c9502deacb0a62983035c6f6f4e962b319ba6a1f4a77d3d",
                "dweb:/ipfs/QmaWCW7ahEQqFjwhSUhV7Ae7WhfNvzSpE7DQ58hvEooqPL"
            ]
        },
        "@openzeppelin/contracts/access/extensions/IAccessControlEnumerable.sol": {
            "keccak256": "0xbc97d8c0d67d4d7eba1e662f0a8671712ace9e060ab03af547c4bb321aec1d8c",
            "license": "MIT",
            "urls": [
                "bzz-raw://890d156f50630d52c7be57d7e0499132d6fd92b2e1365b81531f4463b3304377",
                "dweb:/ipfs/QmUHe9uL1ciePH2pQg7wdrgTAFRZWjcpBEAg8V1UNtXutd"
            ]
        },
        "@openzeppelin/contracts/interfaces/IERC1363.sol": {
            "keccak256": "0xd5ea07362ab630a6a3dee4285a74cf2377044ca2e4be472755ad64d7c5d4b69d",
            "license": "MIT",
            "urls": [
                "bzz-raw://da5e832b40fc5c3145d3781e2e5fa60ac2052c9d08af7e300dc8ab80c4343100",
                "dweb:/ipfs/QmTzf7N5ZUdh5raqtzbM11yexiUoLC9z3Ws632MCuycq1d"
            ]
        },
        "@openzeppelin/contracts/interfaces/IERC165.sol": {
            "keccak256": "0x0afcb7e740d1537b252cb2676f600465ce6938398569f09ba1b9ca240dde2dfc",
            "license": "MIT",
            "urls": [
                "bzz-raw://1c299900ac4ec268d4570ecef0d697a3013cd11a6eb74e295ee3fbc945056037",
                "dweb:/ipfs/Qmab9owJoxcA7vJT5XNayCMaUR1qxqj1NDzzisduwaJMcZ"
            ]
        },
        "@openzeppelin/contracts/interfaces/IERC1967.sol": {
            "keccak256": "0xbf2aefe54b76d7f7bcd4f6da1080b7b1662611937d870b880db584d09cea56b5",
            "license": "MIT",
            "urls": [
                "bzz-raw://f5e7e2f12e0feec75296e57f51f82fdaa8bd1551f4b8cc6560442c0bf60f818c",
                "dweb:/ipfs/QmcW9wDMaQ8RbQibMarfp17a3bABzY5KraWe2YDwuUrUoz"
            ]
        },
        "@openzeppelin/contracts/interfaces/IERC20.sol": {
            "keccak256": "0x1a6221315ce0307746c2c4827c125d821ee796c74a676787762f4778671d4f44",
            "license": "MIT",
            "urls": [
                "bzz-raw://1bb2332a7ee26dd0b0de9b7fe266749f54820c99ab6a3bcb6f7e6b751d47ee2d",
                "dweb:/ipfs/QmcRWpaBeCYkhy68PR3B4AgD7asuQk7PwkWxrvJbZcikLF"
            ]
        },
        "@openzeppelin/contracts/interfaces/draft-IERC1822.sol": {
            "keccak256": "0x82f757819bf2429a0d4db141b99a4bbe5039e4ef86dfb94e2e6d40577ed5b28b",
            "license": "MIT",
            "urls": [
                "bzz-raw://37c30ed931e19fb71fdb806bb504cfdb9913b7127545001b64d4487783374422",
                "dweb:/ipfs/QmUBHpv4hm3ZmwJ4GH8BeVzK4mv41Q6vBbWXxn8HExPXza"
            ]
        },
        "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol": {
            "keccak256": "0xa1ad192cd45317c788618bef5cb1fb3ca4ce8b230f6433ac68cc1d850fb81618",
            "license": "MIT",
            "urls": [
                "bzz-raw://b43447bb85a53679d269a403c693b9d88d6c74177dfb35eddca63abaf7cf110a",
                "dweb:/ipfs/QmXSDmpd4bNZj1PDgegr6C4w1jDaWHXCconC3rYiw9TSkQ"
            ]
        },
        "@openzeppelin/contracts/proxy/beacon/IBeacon.sol": {
            "keccak256": "0x20462ddb2665e9521372c76b001d0ce196e59dbbd989de9af5576cad0bd5628b",
            "license": "MIT",
            "urls": [
                "bzz-raw://f417fd12aeec8fbfaceaa30e3a08a0724c0bc39de363e2acf6773c897abbaf6d",
                "dweb:/ipfs/QmU4Hko6sApdweVM92CsiuLKkCk8HfyBeutF89PCTz5Tye"
            ]
        },
        "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
            "keccak256": "0x74ed01eb66b923d0d0cfe3be84604ac04b76482a55f9dd655e1ef4d367f95bc2",
            "license": "MIT",
            "urls": [
                "bzz-raw://5282825a626cfe924e504274b864a652b0023591fa66f06a067b25b51ba9b303",
                "dweb:/ipfs/QmeCfPykghhMc81VJTrHTC7sF6CRvaA1FXVq2pJhwYp1dV"
            ]
        },
        "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
            "keccak256": "0x982c5cb790ab941d1e04f807120a71709d4c313ba0bfc16006447ffbd27fbbd5",
            "license": "MIT",
            "urls": [
                "bzz-raw://8150ceb4ac947e8a442b2a9c017e01e880b2be2dd958f1fa9bc405f4c5a86508",
                "dweb:/ipfs/QmbcBmFX66AY6Kbhnd5gx7zpkgqnUafo43XnmayAM7zVdB"
            ]
        },
        "@openzeppelin/contracts/utils/Address.sol": {
            "keccak256": "0x6d0ae6e206645341fd122d278c2cb643dea260c190531f2f3f6a0426e77b00c0",
            "license": "MIT",
            "urls": [
                "bzz-raw://032d1201d839435be2c85b72e33206b3ea980c569d6ebf7fa57d811ab580a82f",
                "dweb:/ipfs/QmeqQjAtMvdZT2tG7zm39itcRJkuwu8AEReK6WRnLJ18DD"
            ]
        },
        "@openzeppelin/contracts/utils/Arrays.sol": {
            "keccak256": "0xa4b9958797e0e9cde82a090525e90f80d5745ba1c67ee72b488bd3087498a17e",
            "license": "MIT",
            "urls": [
                "bzz-raw://c9344f7c2f80322c2e76d9d89bed03fd12f3e011e74fde7cf24ea21bdd2abe2d",
                "dweb:/ipfs/QmPMAjF5x2fHUAee2FKMZDBbFVrbZbPCr3a9KHLZaSn1zY"
            ]
        },
        "@openzeppelin/contracts/utils/Comparators.sol": {
            "keccak256": "0x302eecd8cf323b4690e3494a7d960b3cbce077032ab8ef655b323cdd136cec58",
            "license": "MIT",
            "urls": [
                "bzz-raw://49ba706f1bc476d68fe6c1fad75517acea4e9e275be0989b548e292eb3a3eacd",
                "dweb:/ipfs/QmeBpvcdGWzWMKTQESUCEhHgnEQYYATVwPxLMxa6vMT7jC"
            ]
        },
        "@openzeppelin/contracts/utils/Errors.sol": {
            "keccak256": "0x6afa713bfd42cf0f7656efa91201007ac465e42049d7de1d50753a373648c123",
            "license": "MIT",
            "urls": [
                "bzz-raw://ba1d02f4847670a1b83dec9f7d37f0b0418d6043447b69f3a29a5f9efc547fcf",
                "dweb:/ipfs/QmQ7iH2keLNUKgq2xSWcRmuBE5eZ3F5whYAkAGzCNNoEWB"
            ]
        },
        "@openzeppelin/contracts/utils/Panic.sol": {
            "keccak256": "0xf7fe324703a64fc51702311dc51562d5cb1497734f074e4f483bfb6717572d7a",
            "license": "MIT",
            "urls": [
                "bzz-raw://c6a5ff4f9fd8649b7ee20800b7fa387d3465bd77cf20c2d1068cd5c98e1ed57a",
                "dweb:/ipfs/QmVSaVJf9FXFhdYEYeCEfjMVHrxDh5qL4CGkxdMWpQCrqG"
            ]
        },
        "@openzeppelin/contracts/utils/SlotDerivation.sol": {
            "keccak256": "0x67672e4ca1dafdcc661d4eba8475cfac631fa0933309258e3af7644b92e1fb26",
            "license": "MIT",
            "urls": [
                "bzz-raw://30192451f05ea5ddb0c18bd0f9003f098505836ba19c08a9c365adf829454da2",
                "dweb:/ipfs/QmfCuZSCTyCdFoSKn7MSaN6hZksnQn9ZhrZDAdRTCbwGu2"
            ]
        },
        "@openzeppelin/contracts/utils/StorageSlot.sol": {
            "keccak256": "0xcf74f855663ce2ae00ed8352666b7935f6cddea2932fdf2c3ecd30a9b1cd0e97",
            "license": "MIT",
            "urls": [
                "bzz-raw://9f660b1f351b757dfe01438e59888f31f33ded3afcf5cb5b0d9bf9aa6f320a8b",
                "dweb:/ipfs/QmarDJ5hZEgBtCmmrVzEZWjub9769eD686jmzb2XpSU1cM"
            ]
        },
        "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
            "keccak256": "0x8891738ffe910f0cf2da09566928589bf5d63f4524dd734fd9cedbac3274dd5c",
            "license": "MIT",
            "urls": [
                "bzz-raw://971f954442df5c2ef5b5ebf1eb245d7105d9fbacc7386ee5c796df1d45b21617",
                "dweb:/ipfs/QmadRjHbkicwqwwh61raUEapaVEtaLMcYbQZWs9gUkgj3u"
            ]
        },
        "@openzeppelin/contracts/utils/math/Math.sol": {
            "keccak256": "0x1225214420c83ebcca88f2ae2b50f053aaa7df7bd684c3e878d334627f2edfc6",
            "license": "MIT",
            "urls": [
                "bzz-raw://6c5fab4970634f9ab9a620983dc1c8a30153981a0b1a521666e269d0a11399d3",
                "dweb:/ipfs/QmVRnBC575MESGkEHndjujtR7qub2FzU9RWy9eKLp4hPZB"
            ]
        },
        "@openzeppelin/contracts/utils/math/SafeCast.sol": {
            "keccak256": "0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54",
            "license": "MIT",
            "urls": [
                "bzz-raw://b1d578337048cad08c1c03041cca5978eff5428aa130c781b271ad9e5566e1f8",
                "dweb:/ipfs/QmPFKL2r9CBsMwmUqqdcFPfHZB2qcs9g1HDrPxzWSxomvy"
            ]
        },
        "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
            "keccak256": "0x1fc283df727585919c3db301b948a3e827aee16917457ad7f916db9da2228e77",
            "license": "MIT",
            "urls": [
                "bzz-raw://a4f4b5e2cd0ebc3b74e41e4e94771a0417eedd9b11cec3ef9f90b2ac2989264b",
                "dweb:/ipfs/QmZmsEsvsXiwAyAe1YeoLSKezeFcvR1giUeEY6ex4zpsTS"
            ]
        },
        "contracts/RewardPool.sol": {
            "keccak256": "0x8fa500b24592ebc9be64481595423fabcbf4fa0a97a81ca0ac8cf011345c6c94",
            "license": "MIT",
            "urls": [
                "bzz-raw://9c3cf36cf79d1107e12173210cfdb25c8ead9461dce7432ee4eaeec609f8888b",
                "dweb:/ipfs/QmNvHSJ4ypoXdZNbCo4FS62gkkSD39nEhDceuNuV1NQorr"
            ]
        }
    },
    "version": 1
}